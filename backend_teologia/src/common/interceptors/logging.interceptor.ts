import {
  Injectable,
  NestInterceptor,
  ExecutionContext,
  CallHandler,
  Logger,
} from '@nestjs/common';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';

/**
 * üîπ Interceptor global para logar requisi√ß√µes HTTP no NestJS.
 * üìÅ src/common/interceptors/logging.interceptor.ts
 * 
 * Esse interceptor intercepta todas as requisi√ß√µes HTTP e loga
 * informa√ß√µes √∫teis como m√©todo, URL e tempo de execu√ß√£o da requisi√ß√£o.
 */
@Injectable()
export class LoggingInterceptor implements NestInterceptor {
  // Inst√¢ncia do Logger do NestJS para padronizar logs
  private readonly logger = new Logger(LoggingInterceptor.name);

  /**
   * M√©todo que intercepta a requisi√ß√£o e adiciona o log.
   * @param context - Contexto de execu√ß√£o da requisi√ß√£o
   * @param next - Pr√≥ximo manipulador (controller ou outro interceptor)
   * @returns Observable com a resposta da requisi√ß√£o
   */
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    // üîπ Obt√©m informa√ß√µes da requisi√ß√£o HTTP
    const request = context.switchToHttp().getRequest();
    const method = request.method;
    const url = request.url;

    const startTime = Date.now();

    // üîπ Processa a requisi√ß√£o e mede o tempo de execu√ß√£o
    return next.handle().pipe(
      tap(() => {
        const endTime = Date.now() - startTime;
        // üîπ Log do m√©todo, URL e tempo gasto
        this.logger.log(
          `üü¢ [${method}] ${url} - ${endTime}ms`,
        );
      }),
    );
  }
}